diff --git a/libcontainer/cgroups/fs/devices.go b/libcontainer/cgroups/fs/devices.go
index 0ac5b4e..70cd12c 100644
--- a/libcontainer/cgroups/fs/devices.go
+++ b/libcontainer/cgroups/fs/devices.go
@@ -3,6 +3,8 @@
 package fs
 
 import (
+	"strings"
+
 	"github.com/opencontainers/runc/libcontainer/cgroups"
 	"github.com/opencontainers/runc/libcontainer/configs"
 	"github.com/opencontainers/runc/libcontainer/system"
@@ -30,10 +32,25 @@ func (s *DevicesGroup) Set(path string, cgroup *configs.Cgroup) error {
 		return nil
 	}
 
+	devList, err := readFile(path, "devices.list")
+	if err != nil {
+		return err
+	}
+
 	devices := cgroup.Resources.Devices
 	if len(devices) > 0 {
 		for _, dev := range devices {
 			file := "devices.deny"
+			//The first time:
+			// 	1. write 'a *:* rwm' to devices.deny
+			//  2. add all allowed devices in a loop
+			//Any further updates(from k8s, or docker cli):
+			//  1. skip 'deny all' procedure if it's not the first time. ( Check if 'a *:* rmw' exists or not)
+			//  2. add all allowed devices to current devices.list (if already exists, nothing happen)
+
+			if !dev.Allow && !strings.HasPrefix(devList, "a *:* rwm") && dev.CgroupString() == "a *:* rwm" {
+				continue
+			}
 			if dev.Allow {
 				file = "devices.allow"
 			}
@@ -45,8 +62,10 @@ func (s *DevicesGroup) Set(path string, cgroup *configs.Cgroup) error {
 	}
 	if cgroup.Resources.AllowAllDevices != nil {
 		if *cgroup.Resources.AllowAllDevices == false {
-			if err := writeFile(path, "devices.deny", "a"); err != nil {
-				return err
+			if strings.HasPrefix(devList, "a *:* rwm") {
+				if err := writeFile(path, "devices.deny", "a"); err != nil {
+					return err
+				}
 			}
 
 			for _, dev := range cgroup.Resources.AllowedDevices {
diff --git a/utils.go b/utils.go
index 5165336..5cdd11e 100644
--- a/utils.go
+++ b/utils.go
@@ -3,6 +3,7 @@ package main
 import (
 	"fmt"
 	"os"
+	"os/exec"
 	"path/filepath"
 	"strconv"
 	"strings"
@@ -54,6 +55,26 @@ func fatal(err error) {
 	os.Exit(1)
 }
 
+func addNVIDIAHook(context *cli.Context, spec *specs.Spec) error {
+	path, err := exec.LookPath("nvidia-container-runtime-hook")
+	if err != nil {
+		return err
+	}
+	args := []string{path}
+	if context.GlobalBool("debug") {
+		args = append(args, "-debug")
+	}
+	if spec.Hooks == nil {
+		spec.Hooks = &specs.Hooks{}
+	}
+	spec.Hooks.Prestart = append(spec.Hooks.Prestart, specs.Hook{
+		Path: path,
+		Args: append(args, "prestart"),
+	})
+
+	return nil
+}
+
 // setupSpec performs initial setup based on the cli.Context for the container
 func setupSpec(context *cli.Context) (*specs.Spec, error) {
 	bundle := context.String("bundle")
@@ -66,6 +87,11 @@ func setupSpec(context *cli.Context) (*specs.Spec, error) {
 	if err != nil {
 		return nil, err
 	}
+
+	if err = addNVIDIAHook(context, spec); err != nil {
+		return nil, err
+	}
+
 	return spec, nil
 }
 
